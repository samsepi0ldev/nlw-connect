/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * NLW Connect
 * OpenAPI spec version: 0.0.1
 */

const API_URL = 'http://192.168.1.100:3333'

export type PostSubscriptionsBody = {
  name: string
  email: string
  /** @nullable */
  referrer?: string | null
}

export type PostSubscriptions201 = {
  subscriberId: string
}

export type GetInvitesSubscriberId201 = {
  subscriberId: string
}

export type GetSubscriberIdRankingClick200 = {
  count: number
}

export type GetSubscriberIdRankingCount200 = {
  count: number
}

export type GetSubscriberIdRankingPosition200 = {
  /** @nullable */
  position: number | null
}

export type GetRanking200RankingItem = {
  id: string
  name: string
  score: number
}

export type GetRanking200 = {
  ranking: GetRanking200RankingItem[]
}

/**
 * @summary Subscribes someone to the event
 */
export const getPostSubscriptionsUrl = () => {
  return `${API_URL}/subscriptions`
}

export const postSubscriptions = async (
  postSubscriptionsBody: PostSubscriptionsBody,
  options?: RequestInit
): Promise<PostSubscriptions201> => {
  const res = await fetch(getPostSubscriptionsUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(postSubscriptionsBody),
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: PostSubscriptions201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Access invite link and redirects user
 */
export const getGetInvitesSubscriberIdUrl = (subscriberId: string) => {
  return `${API_URL}/invites/${subscriberId}`
}

export const getInvitesSubscriberId = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetInvitesSubscriberId201> => {
  const res = await fetch(getGetInvitesSubscriberIdUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetInvitesSubscriberId201 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invite click
 */
export const getGetSubscriberIdRankingClickUrl = (subscriberId: string) => {
  return `${API_URL}/subscribers/${subscriberId}/ranking/click`
}

export const getSubscriberIdRankingClick = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberIdRankingClick200> => {
  const res = await fetch(getGetSubscriberIdRankingClickUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberIdRankingClick200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber invite count
 */
export const getGetSubscriberIdRankingCountUrl = (subscriberId: string) => {
  return `${API_URL}/subscribers/${subscriberId}/ranking/count`
}

export const getSubscriberIdRankingCount = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberIdRankingCount200> => {
  const res = await fetch(getGetSubscriberIdRankingCountUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberIdRankingCount200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get subscriber ranmking position
 */
export const getGetSubscriberIdRankingPositionUrl = (subscriberId: string) => {
  return `${API_URL}/subscribers/${subscriberId}/ranking/position`
}

export const getSubscriberIdRankingPosition = async (
  subscriberId: string,
  options?: RequestInit
): Promise<GetSubscriberIdRankingPosition200> => {
  const res = await fetch(getGetSubscriberIdRankingPositionUrl(subscriberId), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetSubscriberIdRankingPosition200 = body ? JSON.parse(body) : {}

  return data
}

/**
 * @summary Get ranking
 */
export const getGetRankingUrl = () => {
  return `${API_URL}/ranking`
}

export const getRanking = async (
  options?: RequestInit
): Promise<GetRanking200> => {
  const res = await fetch(getGetRankingUrl(), {
    ...options,
    method: 'GET',
  })

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: GetRanking200 = body ? JSON.parse(body) : {}

  return data
}
